// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String
  password        String
  isAdmin         Boolean
  createdProducts Product[] // one user can create many products
  orders          Order[] // one user can create many orders
  shippingAddress ShippingAddress[] // one user can create many shipping addresses
}

model Review {
  id              Int       @id @default(autoincrement())
  name            String
  rating          Decimal
  comment         String
  // boilerplate
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  // relations
  productId       Int?
  productReviewed Product?  @relation(fields: [productId], references: [id])
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String
  image        String
  brand        String
  category     String
  description  String
  rating       Decimal
  numReviews   Int
  price        Int
  countInStock Int
  // boilerplate
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?
  // relationships
  reviews      Review[]
  userId       Int
  author       User        @relation(fields: [userId], references: [id])
  orderItem    OrderItem[]
}

model Order {
  id            Int             @id @default(autoincrement())
  paymentMethod String
  taxPrice      Int
  shippingPrice Int
  totalPrice    Int
  isPaid        Boolean
  paidAt        DateTime?
  isShipped     Boolean
  shippedAt     DateTime?
  isDelivered   Boolean
  deliveredAt   DateTime?
  // boilerplate
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?
  // relationships
  userId        Int
  orderUser     User            @relation(fields: [userId], references: [id])
  paymentResult PaymentResult[]
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  qty       Int
  price     Int
  // boilerplate
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  // relationships
  productId Int
  product   Product   @relation(fields: [productId], references: [id])
}

model ShippingAddress {
  id        Int       @id @default(autoincrement())
  address1  String
  address2  String?
  city      String
  state     String
  country   String
  zip       String
  phone     String?
  // boilerplate
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  // relationships
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}

model PaymentResult {
  id         Int       @id @default(autoincrement())
  status     String
  paymentId  String
  updateTime String
  // boilerplate
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  // relationships
  orderId    Int
  order      Order     @relation(fields: [orderId], references: [id])
}
